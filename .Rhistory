d=read.sas7bdat("D:\\IITK Data Analytics\\R\\Hypothesis-Testing-in-R-\\hsb2.sas7bdat")
t.test(d$read,d$write,paired = TRUE)
## ----
fit = aov(alcohol ~ quality ,data=wq)
wq=read.csv("D:\\IITK Data Analytics\\R\\Hypothesis-Testing-in-R-\\winequality-white.csv",
sep=";")
## ----
fit = aov(alcohol ~ quality ,data=wq)
summary(fit)
wq=read.csv("D:\\IITK Data Analytics\\R\\Hypothesis-Testing-in-R-\\winequality-white.csv",
sep=";")
t.test(wq$alcohol,mu = 10.6)
## ------------------------------------------------------------------------
t.test(wq$alcohol,mu = 10,alternative ="less" )
t.test(wq$alcohol,mu = 11,alternative ="greater" )
## ----
# please install package sas7bdat
library(sas7bdat)
d=read.sas7bdat("D:\\IITK Data Analytics\\R\\Hypothesis-Testing-in-R-\\hsb2.sas7bdat")
t.test(d$read,d$write,paired = TRUE)
mean(d$read)-mean(d$write)
read_f=d$read[d$female==1]
read_m=d$read[d$female==0]
var.test(read_f,read_m) # H_0 : ratio of variance = 1
t.test(read_f,read_m,paired = FALSE,var.equal = TRUE)
## ----
fit = aov(alcohol ~ quality ,data=wq)
summary(fit)
fit
summary(fit)
summary(fit)
pairwise.t.test(wq$alcohol, wq$quality)
table(d$race)
prop.table(table(d$race))
View(wq)
View(wq)
min(wq$alcohol)
max(wq$alcohol)
## ------------------------------------------------------------------------
chisq.test(table(d$race),p=c(0.2,0.1,0.1,0.6))
## ------------------------------------------------------------------------
chisq.test(table(d$race),p=c(0.1,0.1,0.1,0.7))
## ------------------------------------------------------------------------
chisq.test(table(d$race),p=c(0.1,0.1,0.1,0.7))
## ------------------------------------------------------------------------
chisq.test(table(d$ses,d$female))
## ------------------------------------------------------------------------
table(d$race,d$ses)
## ------------------------------------------------------------------------
chisq.test(table(d$ses,d$race))
## ------------------------------------------------------------------------
fisher.test(table(d$race,d$ses))
diss=daisy(cars.std) #makes distance matrix
sk=silhouette(groups.3,diss)
plot(sk)
library(factoextra)
library(tidymodels)
library(cluster)
library(plotly)
library(Rtsne)
library(dbscan)
library(forcats)
library(embed)
## ------------------------------------------------------------------------
cars=mtcars %>% select(-vs,-am)
## ------------------------------------------------------------------------
medians = apply(cars,2,median)
mads = apply(cars,2,mad)
# experiment with other measures of central tendencey
# and variability and see how the grouping changes
# Agglomerative[Hierarchical] Clustering
cars.std=data.frame(scale(cars,center=medians,scale=mads))
cars.dist = dist(cars.std) #makes a half matrix
cars.hclust = hclust(cars.dist,method = "complete")
fviz_dend(cars.hclust, main = "centroid",k=3)
plot(cars.hclust)
# making groups
## ------------------------------------------------------------------------
groups.3=cutree(cars.hclust,3)
groups.3
table(groups.3)
rownames(cars)[groups.3==1]
tapply(cars$mpg,groups.3,mean)
tapply(cars$wt,groups.3,mean)
my_tapply=function(x){
return(tapply(x,groups.3,mean))
}
apply(cars,2,my_tapply)
diss=daisy(cars.std) #makes distance matrix
sk=silhouette(groups.3,diss)
plot(sk)
sk
wq=wq %>% select(alcohol,pH,sulphates)
wq.std=scale(wq)
kclusts =
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(wq.std, .x)),
glanced = map(kclust, glance),
)
wq.std=scale(wq)
kclusts =
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(wq.std, .x)),
glanced = map(kclust, glance),
)
wq=wq %>% select(alcohol,pH,sulphates)
# Kmeans Clustering
wq=read.csv("D:\\IITK Data Analytics\\R\\Hypothesis-Testing-in-R-\\winequality-white.csv",sep=";")
wq=wq %>% select(alcohol,pH,sulphates)
wq.std=scale(wq)
kclusts =
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(wq.std, .x)),
glanced = map(kclust, glance),
)
kclusts %>%
unnest(cols = c(glanced)) %>%
ggplot(aes(k, tot.withinss)) +
geom_line(alpha = 0.5, size = 1.2, color = "midnightblue") +
geom_point(size = 2, color = "midnightblue")
kclusts =
tibble(k = 1:20) %>%
mutate(
kclust = map(k, ~ kmeans(wq.std, .x)),
glanced = map(kclust, glance),
)
kclusts %>%
unnest(cols = c(glanced)) %>%
ggplot(aes(k, tot.withinss)) +
geom_line(alpha = 0.5, size = 1.2, color = "midnightblue") +
geom_point(size = 2, color = "midnightblue")
kclusts =
tibble(k = 1:100) %>%
mutate(
kclust = map(k, ~ kmeans(wq.std, .x)),
glanced = map(kclust, glance),
)
kclusts %>%
unnest(cols = c(glanced)) %>%
ggplot(aes(k, tot.withinss)) +
geom_line(alpha = 0.5, size = 1.2, color = "midnightblue") +
geom_point(size = 2, color = "midnightblue")
final_clust = kmeans(wq.std, centers = 3)
wq_with_cluster=augment(final_clust, wq)
wq_with_cluster
apply(wq,2,function(x) tapply(x,wq_with_cluster$.cluster,mean))
p = augment(final_clust, wq) %>%
ggplot(aes(pH, sulphates, color = .cluster)) +
geom_point()
p
bd=read.csv("D:\\IITK Data Analytics\\R\\bank-full.csv",sep=";",
stringsAsFactors = T)
View(bd)
moon_data=read.csv("D:\\IITK Data Analytics\\R\\Unsupervised-Learning\\moon_data (1).csv",stringsAsFactors = F)
glimpse(moon_data)
# author : lalit sachan
library(factoextra)
library(tidymodels)
library(cluster)
library(plotly)
library(Rtsne)
library(dbscan)
library(forcats)
library(embed)
pca_prep = prep(pca_rec)
bd=read.csv("D:\\IITK Data Analytics\\R\\bank-full.csv",sep=";",
stringsAsFactors = T)
visdat::vis_dat(bd)
bd_sub=bd %>%
select(age,job,marital,education,default,balance,housing) %>%
mutate(age=as.vector(scale(age)),
balance=as.vector(scale(balance))) %>%
sample_n(10000)
# its slow and takes a while
gower_dist = daisy(bd_sub, metric = "gower")
gower_mat = as.matrix(gower_dist)
min_dis=min(gower_mat[gower_mat!=0])
bd_sub[which(gower_mat==min_dis,arr.ind=T)[1,],]
max_dis=max(gower_mat)
bd_sub[which(gower_mat==max_dis,arr.ind=T)[1,],]
sil_width = c(NA)
for(i in 2:8){
pam_fit <- pam(gower_dist, diss = TRUE, k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:8, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:8, sil_width)
library(factoextra)
library(tidymodels)
library(cluster)
library(plotly)
library(Rtsne)
library(dbscan)
library(forcats)
library(embed)
bd=read.csv("D:\\IITK Data Analytics\\R\\bank-full.csv",sep=";",
stringsAsFactors = T)
visdat::vis_dat(bd)
bd_sub=bd %>%
select(age,job,marital,education,default,balance,housing) %>%
mutate(age=as.vector(scale(age)),
balance=as.vector(scale(balance))) %>%
sample_n(10000)
# its slow and takes a while
gower_dist = daisy(bd_sub, metric = "gower")
gower_mat = as.matrix(gower_dist)
min_dis=min(gower_mat[gower_mat!=0])
bd_sub[which(gower_mat==min_dis,arr.ind=T)[1,],]
max_dis=max(gower_mat)
bd_sub[which(gower_mat==max_dis,arr.ind=T)[1,],]
sil_width = c(NA)
for(i in 2:8){
pam_fit <- pam(gower_dist, diss = TRUE, k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:8, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:8, sil_width)
k = 5
pam_fit = pam(gower_dist, diss = TRUE, k)
pam_results = bd_sub %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
?pam
# In this problem we will build a model to predict the "Prices"
#### importing libraries--------------------------------
library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC) # for AOC curve
library(ggplot2)
library(tidyr)
library(ROCit)
library(dplyr)
### reading the files-----------------------------------
setwd("D:\\IITK Data Analytics\\R\\REAL-ESTATE-R-PROJECT")
filetrain='housing_train.csv'
filetest='housing_test.csv'
train=read.csv(filetrain,stringsAsFactors = F)
test=read.csv(filetest,stringsAsFactors = F)
### studying the dataset-----------------------------
str(train)
glimpse(train)
vis_dat(train)
#
# Price : numeric :: This is the "target variable", price of the property
# Suburb : categorical :: Which subsurb the property is located in
# Address : categorical :: short address
# Type : categorical :: type of the property
# Method : categorical :: method for selling
# SellerG : categorical :: Name of the seller
# Postcode : categorical :: postcode of the property
# CouncilArea : categorical :: council area to which the propery belongs
# Rooms : numeric :: Number of Rooms
# Distance : numeric :: distance from the city center
# Bedroom2 : Numeric :: numbers of secondary bedrooms (this is different from rooms)
# Bathroom : numeric :: number of bathrooms
# Car : numeric :: number of parking spaces
# Landsize : numeric :: landsize
# BuildingArea : numeric :: buildup area
# YearBuilt : numeric :: year of building
# Part 1 : Quiz --------------------------------
train=read.csv(filetrain,stringsAsFactors = F)
### reading the files-----------------------------------
setwd("D:\\IITK Data Analytics\\R\\REAL-ESTATE-R-PROJECT")
filetrain='housing_train.csv'
filetest='housing_test.csv'
train=read.csv(filetrain,stringsAsFactors = F)
test=read.csv(filetest,stringsAsFactors = F)
### studying the dataset-----------------------------
str(train)
glimpse(train)
vis_dat(train)
View(train)
View(train)
train$Address
table(train$Address)
unique(table(train$Address))
unique(table(train$Address))
sd(train$Price)
var(train$Price)
657996.1 ** 2
summary(train$Price)
glimpse(train$Price)
describe(train$Price)
train$YearBuilt.is.na()
table(train$YearBuilt)
train$YearBuilt.is.null
is.null(train$YearBuilt)
is.na(train$YearBuilt)
sum(is.na(train$YearBuilt))
train$Type
table(train$Type)
mean(train$Type == h)
mean(train$Type )
?mean
mean(train$Type =='h', na.rm=True )
mean(train$Type =='h', na.rm=T)
mean(train$Type =='t', na.rm=T)
a1=mean(train$Type =='h', na.rm=T)
a2=mean(train$Type =='t', na.rm=T)
a1-a2
(train$Type == 'h')
length(train$Type == 'h')
table(train$Type == 'h')
table(train$Postcode)
unique(table(train$Postcode))
length(unique(table(train$Postcode)))
unique(train$Postcode)
length(unique(train$Postcode))
train$Distance
hist(train$Distance)
hist(train$Distance,bins=500)
?hist
ggplot(train$Distance) + geom_density()
ggplot(x=train$Distance) + geom_density()
ggplot(x=train$Distance) + geom_scatter()
ggplot(x=train$Distance) + geom_point()
ggplot(aes(x=train$Distance)) + geom_point()
ggplot(train,aes(x=Distance)) + geom_density()
train$SellerG
table(train$SellerG)
max(table(train$SellerG))
which(max(table(train$SellerG)))
sort(table(train$SellerG))
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
group_by(SellerG) %>%
gather(Price)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
arrange(Price)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price,desc(Price))
View(temp)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price,desc(Price))
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price,desc(Price)) %>%
summarise(max_price_sum=sum(Price))
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
summarise(max_price_sum=sum(Price)) %>%
arrange(max_price_sum,desc(max_price_sum))
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea)
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% arrange(CouncilArea,desc(mean(Prince,na.rm=T)))
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% arrange(CouncilArea,desc(mean(Price,na.rm=T)))
View(temp)
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% arrange(CouncilArea,desc(var(Price,na.rm=T)))
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% mutate(variance=var(Price,na.rm=T)) %>%  arrange(CouncilArea,desc(variance))
View(temp)
View(temp)
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T)
%>% arrange(CouncilArea,desc(meanprice))
# 9) Which CouncilArea has maximum average price?
# ANs:
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))
temp=train %>%select(Price,CouncilArea)
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea)
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))
%>% arrange(CouncilArea,desc(meanprice))
source("D:/IITK Data Analytics/R/REAL-ESTATE-R-PROJECT/Real_Estate.R", echo=TRUE)
# 9) Which CouncilArea has maximum average price?
# ANs:
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))%>%
arrange(CouncilArea,desc(meanprice))
View(temp)
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=mean(train$Type =='h', na.rm=T)
a2=mean(train$Type =='t', na.rm=T)
a1-a2
a1
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=mean(train$Type =='h', na.rm=F)
a1
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=mean(train$Type =='h')
a1
a2=mean(train$Type =='t')
a1-a2
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=ifelse(train$Type =='h',mean(train$Price))
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=ifelse(train$Type =='h',mean(train$Price,na.rm=T),invisible())
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=ifelse(train$Type =='h',mean(train$Price,na.rm=T),message('sex'))
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if train$Type=='h'{
a1=mean(train$Price,na.rm=T)
}
if train$Type =='t'{
a2=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if train$Type=='h'{
a1=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
}
a1=mean(train$Price,na.rm=T)
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
}
if (train$Type =='t'){
a2=mean(train$Price,na.rm=T)
}
else 1
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
else 1}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
else 1}
train$Type
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=="h"){
a1=mean(train$Price,na.rm=T)
}
a1=mean(train$Price,na.rm=T)
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=="h"){
a1=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=="h"){
a1=mean(train$Price,na.rm=T)
}
ifelse(train$Type=="h",a1=mean(train$Price,na.rm=T),1)
ifelse(train$Type=="h",mean(train$Price,na.rm=T),1)
aa= 1069723
ifelse(train$Type=="t",mean(train$Price,na.rm=T),1)
