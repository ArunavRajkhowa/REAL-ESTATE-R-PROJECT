bd_sub[which(gower_mat==min_dis,arr.ind=T)[1,],]
max_dis=max(gower_mat)
bd_sub[which(gower_mat==max_dis,arr.ind=T)[1,],]
sil_width = c(NA)
for(i in 2:8){
pam_fit <- pam(gower_dist, diss = TRUE, k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:8, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:8, sil_width)
k = 5
pam_fit = pam(gower_dist, diss = TRUE, k)
pam_results = bd_sub %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
?pam
# In this problem we will build a model to predict the "Prices"
#### importing libraries--------------------------------
library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC) # for AOC curve
library(ggplot2)
library(tidyr)
library(ROCit)
library(dplyr)
### reading the files-----------------------------------
setwd("D:\\IITK Data Analytics\\R\\REAL-ESTATE-R-PROJECT")
filetrain='housing_train.csv'
filetest='housing_test.csv'
train=read.csv(filetrain,stringsAsFactors = F)
test=read.csv(filetest,stringsAsFactors = F)
### studying the dataset-----------------------------
str(train)
glimpse(train)
vis_dat(train)
#
# Price : numeric :: This is the "target variable", price of the property
# Suburb : categorical :: Which subsurb the property is located in
# Address : categorical :: short address
# Type : categorical :: type of the property
# Method : categorical :: method for selling
# SellerG : categorical :: Name of the seller
# Postcode : categorical :: postcode of the property
# CouncilArea : categorical :: council area to which the propery belongs
# Rooms : numeric :: Number of Rooms
# Distance : numeric :: distance from the city center
# Bedroom2 : Numeric :: numbers of secondary bedrooms (this is different from rooms)
# Bathroom : numeric :: number of bathrooms
# Car : numeric :: number of parking spaces
# Landsize : numeric :: landsize
# BuildingArea : numeric :: buildup area
# YearBuilt : numeric :: year of building
# Part 1 : Quiz --------------------------------
train=read.csv(filetrain,stringsAsFactors = F)
### reading the files-----------------------------------
setwd("D:\\IITK Data Analytics\\R\\REAL-ESTATE-R-PROJECT")
filetrain='housing_train.csv'
filetest='housing_test.csv'
train=read.csv(filetrain,stringsAsFactors = F)
test=read.csv(filetest,stringsAsFactors = F)
### studying the dataset-----------------------------
str(train)
glimpse(train)
vis_dat(train)
View(train)
View(train)
train$Address
table(train$Address)
unique(table(train$Address))
unique(table(train$Address))
sd(train$Price)
var(train$Price)
657996.1 ** 2
summary(train$Price)
glimpse(train$Price)
describe(train$Price)
train$YearBuilt.is.na()
table(train$YearBuilt)
train$YearBuilt.is.null
is.null(train$YearBuilt)
is.na(train$YearBuilt)
sum(is.na(train$YearBuilt))
train$Type
table(train$Type)
mean(train$Type == h)
mean(train$Type )
?mean
mean(train$Type =='h', na.rm=True )
mean(train$Type =='h', na.rm=T)
mean(train$Type =='t', na.rm=T)
a1=mean(train$Type =='h', na.rm=T)
a2=mean(train$Type =='t', na.rm=T)
a1-a2
(train$Type == 'h')
length(train$Type == 'h')
table(train$Type == 'h')
table(train$Postcode)
unique(table(train$Postcode))
length(unique(table(train$Postcode)))
unique(train$Postcode)
length(unique(train$Postcode))
train$Distance
hist(train$Distance)
hist(train$Distance,bins=500)
?hist
ggplot(train$Distance) + geom_density()
ggplot(x=train$Distance) + geom_density()
ggplot(x=train$Distance) + geom_scatter()
ggplot(x=train$Distance) + geom_point()
ggplot(aes(x=train$Distance)) + geom_point()
ggplot(train,aes(x=Distance)) + geom_density()
train$SellerG
table(train$SellerG)
max(table(train$SellerG))
which(max(table(train$SellerG)))
sort(table(train$SellerG))
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
group_by(SellerG) %>%
gather(Price)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
arrange(Price)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price,desc(Price))
View(temp)
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price,desc(Price))
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
arrange(Price,desc(Price)) %>%
summarise(max_price_sum=sum(Price))
View(temp)
# 8) Which seller has maximum value transactions? ( Sum of Price)
# ANs:
temp=train %>%
select(SellerG,Price) %>%
group_by(SellerG) %>%
summarise(max_price_sum=sum(Price)) %>%
arrange(max_price_sum,desc(max_price_sum))
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea)
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% arrange(CouncilArea,desc(mean(Prince,na.rm=T)))
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% arrange(CouncilArea,desc(mean(Price,na.rm=T)))
View(temp)
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% arrange(CouncilArea,desc(var(Price,na.rm=T)))
View(temp)
temp=train %>%select(Price,CouncilArea) %>%  group_by(CouncilArea) %>% mutate(variance=var(Price,na.rm=T)) %>%  arrange(CouncilArea,desc(variance))
View(temp)
View(temp)
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T)
%>% arrange(CouncilArea,desc(meanprice))
# 9) Which CouncilArea has maximum average price?
# ANs:
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))
temp=train %>%select(Price,CouncilArea)
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea)
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))
%>% arrange(CouncilArea,desc(meanprice))
source("D:/IITK Data Analytics/R/REAL-ESTATE-R-PROJECT/Real_Estate.R", echo=TRUE)
# 9) Which CouncilArea has maximum average price?
# ANs:
temp=train %>%select(Price,CouncilArea) %>%
group_by(CouncilArea) %>% mutate(meanprice= mean(Price,na.rm=T))%>%
arrange(CouncilArea,desc(meanprice))
View(temp)
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=mean(train$Type =='h', na.rm=T)
a2=mean(train$Type =='t', na.rm=T)
a1-a2
a1
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=mean(train$Type =='h', na.rm=F)
a1
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=mean(train$Type =='h')
a1
a2=mean(train$Type =='t')
a1-a2
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=ifelse(train$Type =='h',mean(train$Price))
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=ifelse(train$Type =='h',mean(train$Price,na.rm=T),invisible())
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
a1=ifelse(train$Type =='h',mean(train$Price,na.rm=T),message('sex'))
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if train$Type=='h'{
a1=mean(train$Price,na.rm=T)
}
if train$Type =='t'{
a2=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if train$Type=='h'{
a1=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
}
a1=mean(train$Price,na.rm=T)
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
}
if (train$Type =='t'){
a2=mean(train$Price,na.rm=T)
}
else 1
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
else 1}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=='h'){
a1=mean(train$Price,na.rm=T)
else 1}
train$Type
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=="h"){
a1=mean(train$Price,na.rm=T)
}
a1=mean(train$Price,na.rm=T)
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=="h"){
a1=mean(train$Price,na.rm=T)
}
# 4) What is the difference in average pTrice between house type h and t?
# Ans: 0.5151274
if (train$Type=="h"){
a1=mean(train$Price,na.rm=T)
}
ifelse(train$Type=="h",a1=mean(train$Price,na.rm=T),1)
ifelse(train$Type=="h",mean(train$Price,na.rm=T),1)
aa= 1069723
ifelse(train$Type=="t",mean(train$Price,na.rm=T),1)
train=read.csv(filetrain,stringsAsFactors = F)
library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC) # for AOC curve
library(ggplot2)
library(tidyr)
library(ROCit)
library(dplyr)
library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC) # for AOC curve
library(ggplot2)
library(tidyr)
library(ROCit)
library(dplyr)
### reading the files-----------------------------------
setwd("D:\\IITK Data Analytics\\R\\REAL-ESTATE-R-PROJECT")
filetrain='housing_train.csv'
filetest='housing_test.csv'
train=read.csv(filetrain,stringsAsFactors = F)
test=read.csv(filetest,stringsAsFactors = F)
View(train)
View(train)
#### Part 2 starts -------------------------------------
test$Price=NA
train$data='train' #creating placeholders
test$data='test'   #creating placeholders
df=rbind(train,test)
glimpse(df)
vis_dat(df)
# Data Preparation
df$Price=as.numeric(df$Price)
vis_dat(df)
# Data Preparation
df = df %>% select(-Address)
vis_dat(df)
table(df$Suburb)
col(df)
names(df)
dp_pipe=recipe(Price~.,data=train) %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea,new_role="to_dummies") %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
train=bake(dp_pipe,new_data=NULL)
test=bake(dp_pipe,new_data=test)
vis_dat(df)
dp_pipe=recipe(Price~.,data=df) %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea,new_role="to_dummies") %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
prep_df=bake(dp_pipe,new_data=NULL)
vis_dat(df)
vis_dat(prep_df)
#dropping NA response rows in training set
prep_df=prep_df[!((is.na(pred_df$Price)) & prep_df$data=='train'), ]
#dropping NA response rows in training set
prep_df=prep_df[!((is.na(prep_df$Price)) & prep_df$data=='train'), ]
#separating train and test dataset
train=prep_df %>% filter(data=='train') %>% select(-data)
test=prep_df %>% filter(data=='test') %>% select(-data,-Price)
vis_dat(train)
vis_dat(test)
for_vif=lm(Price~.,data=train)
sort(vif(for_vif),decreasing = T)[1:3]
E
E
### reading the files-----------------------------------
setwd("D:\\IITK Data Analytics\\R\\REAL-ESTATE-R-PROJECT")
filetrain='housing_train.csv'
filetest='housing_test.csv'
train=read.csv(filetrain,stringsAsFactors = F)
test=read.csv(filetest,stringsAsFactors = F)
# Data Preparation--------------------------------------
df = df %>% select(-Address) #dropping address
#### Part 2 starts -------------------------------------
test$Price=NA
train$data='train' #creating placeholders
test$data='test'   #creating placeholders
df=rbind(train,test)
glimpse(df)
# Data Preparation--------------------------------------
#df = df %>% select(-Address) #dropping address
df$Price=as.numeric(df$Price) #treating response  column separately
dp_pipe=recipe(Price~.,data=df) %>%
update_role(Address,new_role = "drop_vars") %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
prep_df=bake(dp_pipe,new_data=NULL)
vis_dat(prep_df) #all looks good!
View(prep_df)
View(prep_df)
# Data Preparation--------------------------------------
#df = df %>% select(-Address) #dropping address
df$Price=as.numeric(df$Price) #treating response  column separately
dp_pipe=recipe(Price~.,data=df) %>%
update_role(Address,new_role = "drop_vars") %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea,Postcode,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
dp_pipe=recipe(Price~.,data=df) %>%
update_role(Address,new_role = "drop_vars") %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea,as.factor(Postcode) ,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
df$Postcode=as.factor(df$Postcode)
dp_pipe=recipe(Price~.,data=df) %>%
update_role(Address,new_role = "drop_vars") %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea ,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
prep_df=bake(dp_pipe,new_data=NULL)
View(prep_df)
View(prep_df)
dp_pipe=recipe(Price~.,data=df) %>%
update_role(Address,new_role = "drop_vars") %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea,Postcode ,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
prep_df=bake(dp_pipe,new_data=NULL)
names(df)
View(df)
View(df)
vis_dat(prep_df) #all looks good!
#dropping NA response rows in training set
prep_df=prep_df[!((is.na(prep_df$Price)) & prep_df$data=='train'), ]
#separating train and test dataset---------------------------
train=prep_df %>% filter(data=='train') %>% select(-data)
test=prep_df %>% filter(data=='test') %>% select(-data,-Price)
vis_dat(test)
for_vif=lm(Price~.,data=train)
sort(vif(for_vif),decreasing = T)[1:3]
table(prep_df$Type_X__other__)
#separating train and test dataset---------------------------
train=prep_df %>% filter(data=='train') %>% select(-data,-Type_X__other__)
test=prep_df %>% filter(data=='test') %>% select(-data,-Price,-Type_X__other__)
for_vif=lm(Price~.,data=train)
sort(vif(for_vif),decreasing = T)[1:3]
table(prep_df$Method_X__other__)
table(prep_df$Postcode_X3032)
table(prep_df$Postcode_X3040)
table(prep_df$Postcode_X3046)
table(prep_df$Postcode_X30458
)
table(prep_df$Postcode_X3058)
table(prep_df$Postcode_X3072)
table(prep_df$Postcode_X3073)
table(prep_df$Postcode_X3121)
table(prep_df$Postcode_X3163)
table(prep_df$Postcode_X3165)
table(prep_df$Postcode_X3204)
# Data Preparation--------------------------------------
#df = df %>% select(-Address) #dropping address
df$Price=as.numeric(df$Price) #treating response  column separately
df$Postcode=as.factor(df$Postcode)
dp_pipe=recipe(Price~.,data=df) %>%
update_role(Address,new_role = "drop_vars") %>%
update_role(Suburb,Type,Method,SellerG,
CouncilArea,Postcode ,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.03,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
prep_df=bake(dp_pipe,new_data=NULL)
vis_dat(prep_df) #all looks good!
#separating train and test dataset---------------------------
train=prep_df %>% filter(data=='train') %>% select(-data,-Type_X__other__)
test=prep_df %>% filter(data=='test') %>% select(-data,-Price,-Type_X__other__)
vis_dat(test)
vis_dat(train)
for_vif=lm(Price~.,data=train)
sort(vif(for_vif),decreasing = T)[1:3]
View(train)
View(train)
